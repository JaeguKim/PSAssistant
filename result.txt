------------------------------
./2020KAKAO_REQRUIT/movingBlock.py
2h 04min
------------------------------------------------------------
./2020KAKAO_REQRUIT/StrComp.py
------------------------------------------------------------
./2020KAKAO_REQRUIT/columnAndRow.py
print(solution(5,[[1,0,0,1],[1,1,1,1],[2,1,0,1],[2,2,1,1],[5,0,0,1],[5,1,0,1],[4,2,1,1],[3,2,1,1]]))
------------------------------------------------------------
./2020KAKAO_REQRUIT/wallCheck.py
res에 index를 대상으로 중복검사를 해야하는데, dist[idx] 값을 대상으로 검사해서 해맸다
print(solution(12,[1, 5, 6, 10],[1, 2, 3, 4]))
print(solution(12,[1, 3, 4, 9, 10],[3, 5, 7]))
print(solution(50, [1, 5, 10, 12, 22, 25], [3,4,6]))
print(solution(50,[1],[6]))
------------------------------------------------------------
./2020KAKAO_REQRUIT/lock.py
2hour 15m
print(getLockWithPadding([[1, 1, 1], [1, 1, 0], [1, 0, 1]],3,3))
print(getKeyWithPadding([[0, 0, 0], [1, 0, 0], [0, 1, 1]],3,3,1,0))
------------------------------------------------------------
./2020KAKAO_REQRUIT/lyricsSearch.py
1hour 04min : 2018년 문제에서 배운지식으로 응용하여 풀수 있었다.
TRIE로 구현
     printNode(root1,'parent')
     print('==================')
     printNode(root2,'parent')
            print('ch : {} , value : {}'.format(ch,cur.value))
------------------------------------------------------------
./2020KAKAO_REQRUIT/parenthesis.py
------------------------------------------------------------
./2019KAKAO_RECRUIT/matchingScore.py
        url = head.split('og:url')[1].split('content=\"')[1].split("\"")[0]
print(solution("blind",["<html lang=\"ko\" xml:lang=\"ko\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta property=\"og:url\" content=\"https://a.com\"/>\n</head>  \n<body>\nBlind Lorem Blind ipsum dolor Blind test sit amet, consectetur adipiscing elit. \n<a href=\"https://b.com\"> Link to b </a>\n</body>\n</html>", "<html lang=\"ko\" xml:lang=\"ko\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta property=\"og:url\" content=\"https://b.com\"/>\n</head>  \n<body>\nSuspendisse potenti. Vivamus venenatis tellus non turpis bibendum, \n<a href=\"https://a.com\"> Link to a </a>\nblind sed congue urna varius. Suspendisse feugiat nisl ligula, quis malesuada felis hendrerit ut.\n<a href=\"https://c.com\"> Link to c </a>\n</body>\n</html>", "<html lang=\"ko\" xml:lang=\"ko\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta property=\"og:url\" content=\"https://c.com\"/>\n</head>  \n<body>\nUt condimentum urna at felis sodales rutrum. Sed dapibus cursus diam, non interdum nulla tempor nec. Phasellus rutrum enim at orci consectetu blind\n<a href=\"https://a.com\"> Link to a </a>\n</body>\n</html>"]))
print(solution("Muzi",["<html lang=\"ko\" xml:lang=\"ko\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta property=\"og:url\" content=\"https://careers.kakao.com/interview/list\"/>\n</head>  \n<body>\n<a href=\"https://programmers.co.kr/learn/courses/4673\"></a>!MuziMuzi!)jayg07con&&\n\n</body>\n</html>", "<html lang=\"ko\" xml:lang=\"ko\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta property=\"og:url\" content=\"https://www.kakaocorp.com\"/>\n</head>  \n<body>\ncon%\tmuzI92apeach&2<a href=\"https://hashcode.co.kr/tos\"></a>\n\n\t^\n</body>\n</html>"]))
------------------------------------------------------------
./2019KAKAO_RECRUIT/blockGame.py
1h 30m
잘못된 가정을 찾는것이 런타임에러 해결의 핵심이다. 이 문제의 경우에 블럭의 번호가 1부터 순차적으로 부여된다고 내가 가정을 해서 50분만에 풀수있는 문제를 1시간 반동안 붙잡고 있었다.
문제를 다시 정확히 읽는것이 중요하다
dictionary는 루프도중 값을 제거하는것이 불가능하다
------------------------------------------------------------
./2019KAKAO_RECRUIT/openChat.py
planning : 10m 52s
coding : 36m
total : 46m 30s
------------------------------------------------------------
./2019KAKAO_RECRUIT/live.py
최적화 아이디어가 잘 생각이 안나던 문제
거의 같으나 좀더 직관적인 풀이
------------------------------------------------------------
./2019KAKAO_RECRUIT/failRate.py
------------------------------------------------------------
./2019KAKAO_RECRUIT/candidate.py
planning : 13m 52
------------------------------------------------------------
./2019KAKAO_RECRUIT/pathFinding.py
sys.setrecursionlimit(10**6)  increase recursion stack level
------------------------------------------------------------
./lyricsSearch.py
1hour 04min : 2018년 문제에서 배운지식으로 응용하여 풀수 있었다.
TRIE로 구현
     printNode(root1,'parent')
     print('==================')
     printNode(root2,'parent')
            print('ch : {} , value : {}'.format(ch,cur.value))
------------------------------------------------------------
./AmusingJoke.py
20min
dictionary로 hash를 만들때 초기화 값에 유의하자
------------------------------